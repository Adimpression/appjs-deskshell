{
  "name": "chrome-rdebug",
  "version": "0.0.10",
  "description": "Full implementation of the chrome/webkit remote debugging protocol. Implemented to use as the bridge for AppJS v2.0",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/sihorton/chrome-rDebug.git"
  },
  "keywords": [
    "remote",
    "debug"
  ],
  "author": {
    "name": "sihorton"
  },
  "license": "MIT",
  "readme": "chrome-rDebug\n=============\n\nApi for using chrome remote debugging protocol. Written to provide a bridge api for AppJS v2.0\n\nThe API implements all methods detailed in the spec: https://developers.google.com/chrome-developer-tools/docs/protocol/1.0/\n\nExample Code:\n-------------\n      \n    var rDebug = require('./index.js').rDebug;\n    var request = require(\"request\");\n     \n    request(\"http://localhost:9222/json\", function(error, response, body) {\n        var chromeDebugOptions = JSON.parse(body);\n        var chromeDebugUrl = chromeDebugOptions[0].webSocketDebuggerUrl;\n        var rDebugApi = rDebug.openSocket(chromeDebugUrl);\n\n        rDebugApi.ws.on('close',function() {\n            console.log('disconnected');\n        });\n        var printErr = function(err) {\n            console.log(\"error:\"+err.error.code+\" \"+err.error.message);\n        };\n        rDebugApi.on('*',function(event) {\n            console.log(\"Event:\",event);\n        });\n        rDebugApi.ws.on('open',function() {\n            console.log('connected');\n            \n            rDebugApi.domGetDocument().then(function(doc) {\n                rDebugApi.domGetOuterHTML(doc.root.nodeId)\n                .then(function(res) {\n                    console.log(\"page html:\",res.outerHTML);\n                    rDebugApi.pageNavigate(\"http://appjs.com\").then(function() {\n                        setTimeout(function(){\n                            rDebugApi.pageNavigate(\"about:blank\")\n                        },5000);\n                    }).fail(function(err) {\n                    console.log(\"error:\"+err.error.code+\" \"+err.error.message);\n                    });\n                }).fail(function(err) {\n                    console.log(\"error:\"+err.error.code+\" \"+err.error.message);\n                });\n            }).fail(printErr);\n        });\n    });\n\n\nPage Api:\n=========\n\n* pageNavigate(url)\n* pageReload\n* pageDisableEvents\n* pageEnableEvents\n \nConsole Api:\n============\n* consoleClearMessages\n* consoleEnable\n* consoleDisable\n\nDOM Api:\n========\n* domGetDocument\n* domGetOuterHTML\n* domHideHighlight\n* domHighlightNode\n* domHighlightRect\n* domMoveTo\n* domQuerySelector\n* domQuerySelectorAll\n* domRemoveAttribute\n* domRemoveNode\n* domRequestChildNodes\n* domRequestNode\n* domResolveNode\n* domSetAttributeValue\n* domSetAttributesAsText\n* domSetNodeName\n* domSetNodeValue\n* domSetOutputHTML\n\nDOM Debugger Api:\n=================\n* domDebuggerRemoveDomBreakpoint\n* domDebuggerRemoveEventListenerBreakpoint\n* domDebuggerRemoveXHRBreakpoint\n* domDebuggerSetDomBreakpoint\n* domDebuggerSetEventListenerBreakpoint\n* domDebuggerSetXHRBreakpoint \n\nRuntime Api:\n============\n* runtimeCallFunctionOn\n* runtimeEvaluate\n* runtimeGetProperties\n* runtimeReleaseObject\n* runtimeReleaseObjectGroup \n\nTimeline Api:\n=============\n* timelineStart\n* timelineEnd\n\nNetwork Api:\n============\n* networkCanClearBrowserCache\n* networkCanClearBrowserCookies\n* networkClearBrowserCache\n* networkClearBrowserCookies\n* networkEnableEvents\n* networkDisableEvents\n* networkGetResponseBody\n* networkSetCacheDisabled\n* networkSetExtraHTTPHeaders\n* networkSetUserAgentOverride\n\nEvent Api:\n==========\nRegister to handle a given event, use '*' to handle all events.\n\nEvent Api Example code:-\n\n    rDebugApi.on('DOM.documentUpdated',function(event) {\n        console.log(\"Event:document updated\");\n    });\n    rDebugApi.on('*',function(event) {\n        //fired for all events.\n        console.log(\"Event:\",event);\n    });\n\nMethods like consoleEnable will turn on console events so you can handle them. consoleDisable and similar functions will then turn off those events.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sihorton/chrome-rDebug/issues"
  },
  "_id": "chrome-rdebug@0.0.10",
  "dist": {
    "shasum": "8bd1c46f6d3b8f81ff0dc9519f10985b8dc1982d"
  },
  "_from": "chrome-rdebug@",
  "_resolved": "https://registry.npmjs.org/chrome-rdebug/-/chrome-rdebug-0.0.10.tgz"
}
